// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	options "go.mongodb.org/mongo-driver/mongo/options"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"

	readpref "go.mongodb.org/mongo-driver/mongo/readpref"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Connect provides a mock function with given fields: _a0
func (_m *Client) Connect(_a0 context.Context) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Disconnect provides a mock function with given fields: _a0
func (_m *Client) Disconnect(_a0 context.Context) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListDatabaseNames provides a mock function with given fields: _a0, _a1, _a2
func (_m *Client) ListDatabaseNames(_a0 context.Context, _a1 interface{}, _a2 ...*options.ListDatabasesOptions) ([]string, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.ListDatabasesOptions) []string); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...*options.ListDatabasesOptions) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields: ctx, rp
func (_m *Client) Ping(ctx context.Context, rp *readpref.ReadPref) error {
	ret := _m.Called(ctx, rp)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *readpref.ReadPref) error); ok {
		r0 = rf(ctx, rp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Query provides a mock function with given fields: _a0, _a1, _a2
func (_m *Client) Query(_a0 context.Context, _a1 string, _a2 primitive.M) (primitive.M, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 primitive.M
	if rf, ok := ret.Get(0).(func(context.Context, string, primitive.M) primitive.M); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(primitive.M)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, primitive.M) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
