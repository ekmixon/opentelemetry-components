// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"go.opentelemetry.io/collector/config"
	"go.opentelemetry.io/collector/model/pdata"
)

// Type is the component type name.
const Type config.Type = "couchdbreceiver"

// MetricIntf is an interface to generically interact with generated metric.
type MetricIntf interface {
	Name() string
	New() pdata.Metric
	Init(metric pdata.Metric)
}

// Intentionally not exposing this so that it is opaque and can change freely.
type metricImpl struct {
	name     string
	initFunc func(pdata.Metric)
}

// Name returns the metric name.
func (m *metricImpl) Name() string {
	return m.name
}

// New creates a metric object preinitialized.
func (m *metricImpl) New() pdata.Metric {
	metric := pdata.NewMetric()
	m.Init(metric)
	return metric
}

// Init initializes the provided metric object.
func (m *metricImpl) Init(metric pdata.Metric) {
	m.initFunc(metric)
}

type metricStruct struct {
	CouchdbBulkRequests        MetricIntf
	CouchdbDatabaseOperations  MetricIntf
	CouchdbHttpdRequestMethods MetricIntf
	CouchdbHttpdResponseCodes  MetricIntf
	CouchdbOpenDatabases       MetricIntf
	CouchdbOpenFiles           MetricIntf
	CouchdbRequestTime         MetricIntf
	CouchdbRequests            MetricIntf
	CouchdbViews               MetricIntf
}

// Names returns a list of all the metric name strings.
func (m *metricStruct) Names() []string {
	return []string{
		"couchdb.bulk_requests",
		"couchdb.database_operations",
		"couchdb.httpd.request_methods",
		"couchdb.httpd.response_codes",
		"couchdb.open_databases",
		"couchdb.open_files",
		"couchdb.request_time",
		"couchdb.requests",
		"couchdb.views",
	}
}

var metricsByName = map[string]MetricIntf{
	"couchdb.bulk_requests":         Metrics.CouchdbBulkRequests,
	"couchdb.database_operations":   Metrics.CouchdbDatabaseOperations,
	"couchdb.httpd.request_methods": Metrics.CouchdbHttpdRequestMethods,
	"couchdb.httpd.response_codes":  Metrics.CouchdbHttpdResponseCodes,
	"couchdb.open_databases":        Metrics.CouchdbOpenDatabases,
	"couchdb.open_files":            Metrics.CouchdbOpenFiles,
	"couchdb.request_time":          Metrics.CouchdbRequestTime,
	"couchdb.requests":              Metrics.CouchdbRequests,
	"couchdb.views":                 Metrics.CouchdbViews,
}

func (m *metricStruct) ByName(n string) MetricIntf {
	return metricsByName[n]
}

// Metrics contains a set of methods for each metric that help with
// manipulating those metrics.
var Metrics = &metricStruct{
	&metricImpl{
		"couchdb.bulk_requests",
		func(metric pdata.Metric) {
			metric.SetName("couchdb.bulk_requests")
			metric.SetDescription("The number of bulk requests.")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeSum)
			metric.Sum().SetIsMonotonic(true)
			metric.Sum().SetAggregationTemporality(pdata.AggregationTemporalityCumulative)
		},
	},
	&metricImpl{
		"couchdb.database_operations",
		func(metric pdata.Metric) {
			metric.SetName("couchdb.database_operations")
			metric.SetDescription("The number of database operations.")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeSum)
			metric.Sum().SetIsMonotonic(true)
			metric.Sum().SetAggregationTemporality(pdata.AggregationTemporalityCumulative)
		},
	},
	&metricImpl{
		"couchdb.httpd.request_methods",
		func(metric pdata.Metric) {
			metric.SetName("couchdb.httpd.request_methods")
			metric.SetDescription("The number of HTTP requests by method.")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeSum)
			metric.Sum().SetIsMonotonic(true)
			metric.Sum().SetAggregationTemporality(pdata.AggregationTemporalityCumulative)
		},
	},
	&metricImpl{
		"couchdb.httpd.response_codes",
		func(metric pdata.Metric) {
			metric.SetName("couchdb.httpd.response_codes")
			metric.SetDescription("TThe number of HTTP response codes by status.")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeSum)
			metric.Sum().SetIsMonotonic(true)
			metric.Sum().SetAggregationTemporality(pdata.AggregationTemporalityCumulative)
		},
	},
	&metricImpl{
		"couchdb.open_databases",
		func(metric pdata.Metric) {
			metric.SetName("couchdb.open_databases")
			metric.SetDescription("The number of open databases.")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"couchdb.open_files",
		func(metric pdata.Metric) {
			metric.SetName("couchdb.open_files")
			metric.SetDescription("The number of file descriptors CouchDB has open")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"couchdb.request_time",
		func(metric pdata.Metric) {
			metric.SetName("couchdb.request_time")
			metric.SetDescription("The length of a request inside CouchDB without MochiWeb.")
			metric.SetUnit("s")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"couchdb.requests",
		func(metric pdata.Metric) {
			metric.SetName("couchdb.requests")
			metric.SetDescription("The number of HTTP requests.")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeSum)
			metric.Sum().SetIsMonotonic(true)
			metric.Sum().SetAggregationTemporality(pdata.AggregationTemporalityCumulative)
		},
	},
	&metricImpl{
		"couchdb.views",
		func(metric pdata.Metric) {
			metric.SetName("couchdb.views")
			metric.SetDescription("The number of view read.")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeSum)
			metric.Sum().SetIsMonotonic(true)
			metric.Sum().SetAggregationTemporality(pdata.AggregationTemporalityCumulative)
		},
	},
}

// M contains a set of methods for each metric that help with
// manipulating those metrics. M is an alias for Metrics
var M = Metrics

// Labels contains the possible metric labels that can be used.
var Labels = struct {
	// HTTPMethod (An HTTP request method.)
	HTTPMethod string
	// NodeName (The name of the node.)
	NodeName string
	// Operation (The number of operations performed.)
	Operation string
	// StatusCode (An HTTP status code.)
	StatusCode string
	// View (The number of views read by type.)
	View string
}{
	"http_method",
	"node_name",
	"operation",
	"status_code",
	"view",
}

// L contains the possible metric labels that can be used. L is an alias for
// Labels.
var L = Labels

// LabelHTTPMethod are the possible values that the label "http_method" can have.
var LabelHTTPMethod = struct {
	COPY    string
	DELETE  string
	GET     string
	HEAD    string
	OPTIONS string
	POST    string
	PUT     string
}{
	"COPY",
	"DELETE",
	"GET",
	"HEAD",
	"OPTIONS",
	"POST",
	"PUT",
}

// LabelOperation are the possible values that the label "operation" can have.
var LabelOperation = struct {
	Reads  string
	Writes string
}{
	"reads",
	"writes",
}

// LabelStatusCode are the possible values that the label "status_code" can have.
var LabelStatusCode = struct {
	HTTP200 string
	HTTP201 string
	HTTP202 string
	HTTP204 string
	HTTP206 string
	HTTP301 string
	HTTP302 string
	HTTP304 string
	HTTP400 string
	HTTP401 string
	HTTP403 string
	HTTP404 string
	HTTP405 string
	HTTP406 string
	HTTP409 string
	HTTP412 string
	HTTP413 string
	HTTP414 string
	HTTP415 string
	HTTP416 string
	HTTP417 string
	HTTP500 string
	HTTP501 string
	HTTP503 string
}{
	"http_200",
	"http_201",
	"http_202",
	"http_204",
	"http_206",
	"http_301",
	"http_302",
	"http_304",
	"http_400",
	"http_401",
	"http_403",
	"http_404",
	"http_405",
	"http_406",
	"http_409",
	"http_412",
	"http_413",
	"http_414",
	"http_415",
	"http_416",
	"http_417",
	"http_500",
	"http_501",
	"http_503",
}

// LabelView are the possible values that the label "view" can have.
var LabelView = struct {
	ViewsRead          string
	TemporaryViewsRead string
}{
	"views_read",
	"temporary_views_read",
}
