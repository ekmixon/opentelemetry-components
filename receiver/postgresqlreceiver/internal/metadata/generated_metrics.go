// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"go.opentelemetry.io/collector/config"
	"go.opentelemetry.io/collector/model/pdata"
)

// Type is the component type name.
const Type config.Type = "postgresql"

// MetricIntf is an interface to generically interact with generated metric.
type MetricIntf interface {
	Name() string
	New() pdata.Metric
	Init(metric pdata.Metric)
}

// Intentionally not exposing this so that it is opaque and can change freely.
type metricImpl struct {
	name     string
	initFunc func(pdata.Metric)
}

// Name returns the metric name.
func (m *metricImpl) Name() string {
	return m.name
}

// New creates a metric object preinitialized.
func (m *metricImpl) New() pdata.Metric {
	metric := pdata.NewMetric()
	m.Init(metric)
	return metric
}

// Init initializes the provided metric object.
func (m *metricImpl) Init(metric pdata.Metric) {
	m.initFunc(metric)
}

type metricStruct struct {
	PostgresqlBackends   MetricIntf
	PostgresqlBlocksRead MetricIntf
	PostgresqlCommits    MetricIntf
	PostgresqlDbRows     MetricIntf
	PostgresqlDbSize     MetricIntf
	PostgresqlOperations MetricIntf
	PostgresqlRollbacks  MetricIntf
}

// Names returns a list of all the metric name strings.
func (m *metricStruct) Names() []string {
	return []string{
		"postgresql.backends",
		"postgresql.blocks_read",
		"postgresql.commits",
		"postgresql.db_rows",
		"postgresql.db_size",
		"postgresql.operations",
		"postgresql.rollbacks",
	}
}

var metricsByName = map[string]MetricIntf{
	"postgresql.backends":    Metrics.PostgresqlBackends,
	"postgresql.blocks_read": Metrics.PostgresqlBlocksRead,
	"postgresql.commits":     Metrics.PostgresqlCommits,
	"postgresql.db_rows":     Metrics.PostgresqlDbRows,
	"postgresql.db_size":     Metrics.PostgresqlDbSize,
	"postgresql.operations":  Metrics.PostgresqlOperations,
	"postgresql.rollbacks":   Metrics.PostgresqlRollbacks,
}

func (m *metricStruct) ByName(n string) MetricIntf {
	return metricsByName[n]
}

func (m *metricStruct) FactoriesByName() map[string]func(pdata.Metric) {
	return map[string]func(pdata.Metric){
		Metrics.PostgresqlBackends.Name():   Metrics.PostgresqlBackends.Init,
		Metrics.PostgresqlBlocksRead.Name(): Metrics.PostgresqlBlocksRead.Init,
		Metrics.PostgresqlCommits.Name():    Metrics.PostgresqlCommits.Init,
		Metrics.PostgresqlDbRows.Name():     Metrics.PostgresqlDbRows.Init,
		Metrics.PostgresqlDbSize.Name():     Metrics.PostgresqlDbSize.Init,
		Metrics.PostgresqlOperations.Name(): Metrics.PostgresqlOperations.Init,
		Metrics.PostgresqlRollbacks.Name():  Metrics.PostgresqlRollbacks.Init,
	}
}

// Metrics contains a set of methods for each metric that help with
// manipulating those metrics.
var Metrics = &metricStruct{
	&metricImpl{
		"postgresql.backends",
		func(metric pdata.Metric) {
			metric.SetName("postgresql.backends")
			metric.SetDescription("The number of backends.")
			metric.SetUnit("")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"postgresql.blocks_read",
		func(metric pdata.Metric) {
			metric.SetName("postgresql.blocks_read")
			metric.SetDescription("The number of blocks read.")
			metric.SetUnit("")
			metric.SetDataType(pdata.MetricDataTypeIntSum)
			metric.IntSum().SetIsMonotonic(true)
			metric.IntSum().SetAggregationTemporality(pdata.AggregationTemporalityCumulative)
		},
	},
	&metricImpl{
		"postgresql.commits",
		func(metric pdata.Metric) {
			metric.SetName("postgresql.commits")
			metric.SetDescription("The number of commits.")
			metric.SetUnit("")
			metric.SetDataType(pdata.MetricDataTypeIntSum)
			metric.IntSum().SetIsMonotonic(true)
			metric.IntSum().SetAggregationTemporality(pdata.AggregationTemporalityCumulative)
		},
	},
	&metricImpl{
		"postgresql.db_rows",
		func(metric pdata.Metric) {
			metric.SetName("postgresql.db_rows")
			metric.SetDescription("The number of rows in the database.")
			metric.SetUnit("")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"postgresql.db_size",
		func(metric pdata.Metric) {
			metric.SetName("postgresql.db_size")
			metric.SetDescription("The database disk usage.")
			metric.SetUnit("")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"postgresql.operations",
		func(metric pdata.Metric) {
			metric.SetName("postgresql.operations")
			metric.SetDescription("The number of db row operations.")
			metric.SetUnit("")
			metric.SetDataType(pdata.MetricDataTypeIntSum)
			metric.IntSum().SetIsMonotonic(true)
			metric.IntSum().SetAggregationTemporality(pdata.AggregationTemporalityCumulative)
		},
	},
	&metricImpl{
		"postgresql.rollbacks",
		func(metric pdata.Metric) {
			metric.SetName("postgresql.rollbacks")
			metric.SetDescription("The number of rollbacks.")
			metric.SetUnit("")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
}

// M contains a set of methods for each metric that help with
// manipulating those metrics. M is an alias for Metrics
var M = Metrics

// Labels contains the possible metric labels that can be used.
var Labels = struct {
	// Backends (The number of backends.)
	Backends string
	// BlocksRead (The number of total blocks read from the database.)
	BlocksRead string
	// BlocksReadByTable (The number of blocks read by table.)
	BlocksReadByTable string
	// Commits (The number of commits.)
	Commits string
	// Database (The name of the database.)
	Database string
	// DbRows (The number of rows in the database.)
	DbRows string
	// DbRowsByTable (The number of rows in the database by table.)
	DbRowsByTable string
	// DbRowsState (The database state (either 'dead' or 'live').)
	DbRowsState string
	// DbRowsStateByTable (The database state (either 'dead' or 'live') by table.)
	DbRowsStateByTable string
	// DbSize (The database disk usage.)
	DbSize string
	// Operations (The number of database row operations.)
	Operations string
	// OperationsByTable (The number of database row operations by table.)
	OperationsByTable string
	// Rollbacks (The number of rollbacks.)
	Rollbacks string
	// Table (The table name and schema name.)
	Table string
}{
	"backends",
	"source",
	"table",
	"commits",
	"database",
	"db_rows",
	"table",
	"state",
	"state",
	"db_size",
	"operation",
	"operation",
	"rollbacks",
	"table",
}

// L contains the possible metric labels that can be used. L is an alias for
// Labels.
var L = Labels

// LabelBackends are the possible values that the label "backends" can have.
var LabelBackends = struct {
	Count string
}{
	"count",
}

// LabelBlocksRead are the possible values that the label "blocks_read" can have.
var LabelBlocksRead = struct {
	HeapReadHeapHit string
	IdxRead         string
	IdxHit          string
	ToastRead       string
	ToastHit        string
	TidxRead        string
	TidxHit         string
}{
	"heap_read heap_hit",
	"idx_read",
	"idx_hit",
	"toast_read",
	"toast_hit",
	"tidx_read",
	"tidx_hit",
}

// LabelBlocksReadByTable are the possible values that the label "blocks_read_by_table" can have.
var LabelBlocksReadByTable = struct {
	HeapReadHeapHit string
	IdxRead         string
	IdxHit          string
	ToastRead       string
	ToastHit        string
	TidxRead        string
	TidxHit         string
}{
	"heap_read heap_hit",
	"idx_read",
	"idx_hit",
	"toast_read",
	"toast_hit",
	"tidx_read",
	"tidx_hit",
}

// LabelCommits are the possible values that the label "commits" can have.
var LabelCommits = struct {
	XactCommit string
}{
	"xact_commit",
}

// LabelDbRows are the possible values that the label "db_rows" can have.
var LabelDbRows = struct {
	Ins    string
	Upd    string
	Del    string
	HotUpd string
}{
	"ins",
	"upd",
	"del",
	"hot_upd",
}

// LabelDbRowsByTable are the possible values that the label "db_rows_by_table" can have.
var LabelDbRowsByTable = struct {
	Ins    string
	Upd    string
	Del    string
	HotUpd string
}{
	"ins",
	"upd",
	"del",
	"hot_upd",
}

// LabelDbRowsState are the possible values that the label "db_rows_state" can have.
var LabelDbRowsState = struct {
	Live string
	Dead string
}{
	"live",
	"dead",
}

// LabelDbRowsStateByTable are the possible values that the label "db_rows_state_by_table" can have.
var LabelDbRowsStateByTable = struct {
	Live string
	Dead string
}{
	"live",
	"dead",
}

// LabelDbSize are the possible values that the label "db_size" can have.
var LabelDbSize = struct {
	DbSize string
}{
	"db_size",
}

// LabelOperations are the possible values that the label "operations" can have.
var LabelOperations = struct {
	Seq         string
	SeqTupRead  string
	Idx         string
	IdxTupFetch string
}{
	"seq",
	"seq_tup_read",
	"idx",
	"idx_tup_fetch",
}

// LabelOperationsByTable are the possible values that the label "operations_by_table" can have.
var LabelOperationsByTable = struct {
	Seq         string
	SeqTupRead  string
	Idx         string
	IdxTupFetch string
}{
	"seq",
	"seq_tup_read",
	"idx",
	"idx_tup_fetch",
}

// LabelRollbacks are the possible values that the label "rollbacks" can have.
var LabelRollbacks = struct {
	XactRollback string
}{
	"xact_rollback",
}

// LabelTable are the possible values that the label "table" can have.
var LabelTable = struct {
	Schemaname string
	Relname    string
}{
	"schemaname",
	"relname",
}
